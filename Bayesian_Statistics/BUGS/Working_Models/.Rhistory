help("str_trim")
str_trim("  String with trailing and leading white space\t")
library(stringr)
test<- str_trim(apply(test))
help(apply)
test<-apply(test, 1, str_trim)
test2<-str_trim(test)
head(test2)
test <-readLines("~/Desktop/packages.txt")
test2<-str_trim(test)
test<-str_trim(test)
rm(test2)
rm(test)
compu1 <-readLines("~/Desktop/packages.txt")
compu1<- str_trim(compu1)
compu2 <-readLines("~/Desktop/packages2.txt")
compu2<- str_trim(compu2)
overlap <- intersect(compu1, compu2)
diff_12 <- setdiff(compu1, compu2)
diff_21 <- setdiff(compu2, compu1)
diff_21
diff_12
overlap
diff_21
library(raster)
library(sp)
library(rgdal)
test<-paste("home/bmarron/Desktop/spp-age-stats/SPP-RICH-0.img", sep="")
spprich0 <-raster(test)
test<-paste("home/bmarron/Desktop/spp-age-stats/SPP-RICH-0.img", sep="")
spprich0 <-raster(test)
test<-paste("home/bmarron/Desktop/spp-age-stats/AGE-AVE-0.img", sep="")
ageave0 <-raster(test)
raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-0.img", sep="")
abiebals0 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-20.img", sep="")
abiebals20 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-40.img", sep="")
abiebals40 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-60.img", sep="")
abiebals60 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-80.img", sep="")
abiebals80 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-100.img", sep="")
abiebals100 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-60.img", sep="")
abiebals60 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-60.img", sep="")
abiebals60 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-80.img", sep="")
abiebals80 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-0.img", sep="")
AllSppMaxAge0 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-20.img", sep="")
AllSppMaxAge20 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-40.img", sep="")
AllSppMaxAge40 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-60.img", sep="")
AllSppMaxAge60 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-80.img", sep="")
AllSppMaxAge80 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-100.img", sep="")
AllSppMaxAge100 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-60.img", sep="")
AllSppMaxAge60 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-40.img", sep="")
AllSppMaxAge40 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-0.img", sep="")
AllSppMaxAge0 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-5.img", sep="")
AllSppMaxAge5 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-10.img", sep="")
AllSppMaxAge10 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-15.img", sep="")
AllSppMaxAge15 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-20.img", sep="")
AllSppMaxAge20 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/AllSppMaxAge-25.img", sep="")
AllSppMaxAge25 <-raster(test)
plot AllSppMaxAge0
plot(AllSppMaxAge0)
plot(AllSppMaxAge10)
plot(AllSppMaxAge20)
plot(AllSppMaxAge40)
plot(AllSppMaxAge0)
plot(AllSppMaxAg40)
plot(AllSppMaxAge40)
plot(AllSppMaxAge0)
plot(AllSppMaxAge40)
plot(AllSppMaxAge0)
q()
plot(abiebals0)
plot(abiebals20)
plot(abiebals40)
plot(abiebals0)
plot(abiebals20)
plot(abiebals40)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-10.img", sep="")
abiebals10 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-30.img", sep="")
abiebals30 <-raster(test)
test<-paste("/home/bmarron/Desktop/max-spp-age/abiebals-50.img", sep="")
abiebals50 <-raster(test)
plot(abiebals0)
plot(abiebals10)
plot(abiebals20)
plot(abiebals30)
plot(abiebals40)
plot(abiebals50)
plot(abiebals0)
abiebals0
plot(abiebals0)
zoom(abiebals0)
getValues(abiebals0, row=1)
getValues(abiebals50, row=1)
test<-paste("/home/bmarron/Desktop/initial-communities.gis", sep="")
initialCommunities <- raster(test)
freq(initialCommunities)
which(initialCommunities[1,]=="4")
which(initialCommunities[1,]=="5")
getValues(abiebals40, row=1)
initialCommunities[1,33]
initialCommunities[1,43]
which(initialCommunities[1,]=="1")
which(initialCommunities[1,]=="2")
which(initialCommunities[1,]=="3")
which(initialCommunities[1,]=="0")
which(initialCommunities[1,]=="6")
plot(abiebals0)
plot(abiebals20)
plot(abiebals50)
q()
plot(abiebals0)
zoom(abiebals0)
plot(abiebals0)
zoom(abiebals0)
plot(abiebals0)
initialCommunities[1,]
initialCommunities
which(initialCommunities[1,]=="0")
which(initialCommunities[1,]=="0")
initialCommunities[1,]
plot(abiebals0)
plot(abiebals0[1,])
plot(abiebals0)
plotpng <- zoom(abiebals0)
png(filename="~/Desktop/plot1.png")
plot(plotpng)
dev.off()
plot(abiebals50)
png(filename="~/Desktop/plot1.png")
zoom(abiebals0)
plot(zoom(abiebals0))
dev.off()
zoom(abiebals0)
a <- zoom(abiebals0)
a
a
plot(a)
plot(abiebals50)
a<-plot(abiebals50)
a
a
a<-plot(abiebals50)
a
png(filename="~/Desktop/plot1.png")
zoom(abiebals0)
dev.off()
install.packages("zoom")
library("zoom", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
plot(abiebals50)
zm()
plot(abiebals50)
zm()
plot(abiebals50)
zm()
q()
library(entropy)
d1<- c(.99,.01)
d2<- c(.95,.05)
d3<- c(0.906, 0.094)		#the empirically-derived stationary distr
d4<- c(.90,.10)
d5<-c(.85,.15)
d_true<- c(0.909, 0.091)
dM <- t(as.matrix(data.frame(d1,d2,d3,d4,d5)))
dM
KL.empirical(d_true, dM[1,], unit="log2")
KL.empirical(d_true, dM[2,], unit="log2")
KLM <- matrix(0, 5, 1)
for (i in 1:5){
KLM[i,1] <- KL.empirical(d_true, dM[i,], unit="log2")
}
KLM
q()
library(distr)
#Experiment1; Generator1; Dist1
#Experiment1; Generator1; Dist2
exp1gen1d1 <- DiscreteDistribution (supp = c(1, 2) , prob = c(0.9, 0.1))
exp1gen1d2 <- DiscreteDistribution (supp = c(1, 2) , prob = c(1, 0))
set.seed(74)
tiks<-1000
Y_0<-1			#at t=0 ==> State 1
Y.G1.data <- NULL	#empty vector
Y.G1.data[1] <- Y_0
for (i in 2:tiks) {
if (Y.G1.data[i-1]=="1"){
Y.G1.data[i] <- r(exp1gen1d1)(1)
} else if (Y.G1.data[i-1]=="2"){
Y.G1.data[i] <- r(exp1gen1d2)(1)
}
}
Y.G1.data
sampled.output.G1 <-as.ts(Y.G1.data[250:300])
stat1 <- function(tsb){
count <- NULL
for (i in 1:49) {
if(identical(window(tsb, i, i+1)[1:2], c(1,1))){
count[i]<-1
}else{
if(identical(window(tsb, i, i+1)[1:2], c(1,2))){
count[i]<-2
}else{
if(identical(window(tsb, i, i+1)[1:2], c(2,1))){
count[i]<-3
}else{
if(identical(window(tsb, i, i+1)[1:2], c(2,2))){
count[i]<-4
}
}
}
}
}
a <- c(sum(tsb=="1"), sum(tsb=="2"))
b<-table(count)
c(a[1], a[2], b[1], b[2], b[3], b[4])
}
set.seed <- 477
boot1<-tsboot(sampled.output.G1, stat1, 1000, 5, "geom")
library(boot)
set.seed <- 477
boot1<-tsboot(sampled.output.G1, stat1, 1000, 5, "geom")
boot1
attributes(boot1)
boot1$data[1,]
boot1$data
boot1$statistic
boot1$t0
boot1$t[1,]
boot1$t[2,]
boot1$t[3,]
colMeans(boot1$t[,1:6], na.rm=TRUE)
colMeans(boot1$t[,1:6], na.rm=FALSE)
colMeans(boot1$t[,1:6], na.rm=TRUE)
stat1 <- function(tsb){
count <- NULL
for (i in 1:50) {
if(identical(window(tsb, i, i+1)[1:2], c(1,1))){
count[i]<-1
}else{
if(identical(window(tsb, i, i+1)[1:2], c(1,2))){
count[i]<-2
}else{
if(identical(window(tsb, i, i+1)[1:2], c(2,1))){
count[i]<-3
}else{
if(identical(window(tsb, i, i+1)[1:2], c(2,2))){
count[i]<-4
}
}
}
}
}
a <- c(sum(tsb=="1"), sum(tsb=="2"))
b<-table(count)
c(a[1], a[2], b[1], b[2], b[3], b[4])
}
set.seed <- 477
boot1<-tsboot(sampled.output.G1, stat1, 1000, 5, "geom")
colMeans(boot1$t[,1:6], na.rm=TRUE)
bs.means <- colMeans(boot1$t[,1:6], na.rm=TRUE)
(bs.p.a <- bs.means[1]/50)
(bs.p.b <- bs.means[2]/50)
(bs.p.aa <- bs.means[3]/50)
(bs.p.ab <- bs.means[4]/50)
(bs.p.ba <- bs.means[5]/50)
(bs.p.bb <- bs.means[6]/50)
(bs.p.a_a <- bs.p.aa/bs.p.a)
(bs.p.a_b <- bs.p.ba/bs.p.b)
(bs.p.b_a <- bs.p.ab/bs.p.a)
(bs.p.b_b <- bs.p.bb/bs.p.b)
boot1$t[1:20,1:6]
is.na(boot1$t)
boot1$t[is.na(boot1$t)]<-0
bs.means <- colMeans(boot1$t[,1:6])
bs.means
(bs.p.a <- bs.means[1]/50)
(bs.p.b <- bs.means[2]/50)
(bs.p.aa <- bs.means[3]/50)
(bs.p.ab <- bs.means[4]/50)
(bs.p.ba <- bs.means[5]/50)
(bs.p.bb <- bs.means[6]/50)
(bs.p.a_a <- bs.p.aa/bs.p.a)
(bs.p.a_b <- bs.p.ba/bs.p.b)
(bs.p.b_a <- bs.p.ab/bs.p.a)
(bs.p.b_b <- bs.p.bb/bs.p.b)
(bootstrap.G1<-matrix(c(bs.p.a_a, bs.p.b_a, bs.p.a_b, bs.p.b_b), 2, byrow=TRUE))
sum(bootstrap.G1[1,]
)
sum(bootstrap.G1[2,])
diff1<-(1-sum(bootstrap.G1[1,]))/2
diff1
bootstrap.G1[1,] + diff1
diff2<-(1-sum(bootstrap.G1[2,]))/2
bootstrap.G1[2,] + diff2
bootstrap.G1[1,] <- (bootstrap.G1[1,] + diff1)
bootstrap.G1
bootstrap.G1[2,] <- (bootstrap.G1[2,] + diff2)
bootstrap.G1
sum(bootstrap.G1[1,]
)
sum(bootstrap.G1[2,])
library(expm)		#allows %^% ==> raising matrix to a power
tiks <- 150
a1 <- matrix(0, 4, 1)
for (i in 2:tiks){
a1 <- cbind(a1, c(bootstrap.G1 %^% i))
if(identical(round(a1[,i],3), round(a1[,i-1],3))) {
break
}
}
a1
library(expm)		#allows %^% ==> raising matrix to a power
tiks <- 150
a1 <- matrix(0, 4, 1)
for (i in 2:tiks){
a1 <- cbind(a1, c(bootstrap.G1 %^% i))
if(identical(round(a1[,i],5), round(a1[,i-1],5))) {
break
}
}
a1
(limit.matrix1 <- round(matrix(a1[,7], 3, byrow=FALSE), 2))
(limit.matrix1 <- round(matrix(a1[,7], 2, byrow=FALSE), 3))
(btstrp.stat.dist1 <- limit.matrix1[1,])
library(entropy)
d1<- c(.99,.01)
d2<- c(.95,.05)
d3<- c(0.914, 0.086) 	#the bootstrap-derived stationary distr
d4<- c(.90,.10)
d5<-c(.85,.15)
d_true<- c(0.909, 0.091)  #the known stationary distr
#prob dist matrix
(dM <- t(as.matrix(data.frame(d1,d2,d3,d4,d5))))
KLM <- matrix(0, 5, 1)
for (i in 1:5){
KLM[i,1] <- KL.empirical(d_true, dM[i,], unit="log2")
}
KLM
q()
detach("package:raster", unload=TRUE)
detach("package:sp", unload=TRUE)
q()
library(rgdal)
library (raster)
library (sp)
test<-paste("~/Desktop/MiscProjects_GitHub/LANDIS_II/LANDIS_experiments/AgeOnlySuccession//initial-communities.gis", sep="")
initialCommunities <-raster(test)
initialCommunities
plot(initialCommunities)
freq(initialCommunities)
dim(initialCommunities)
getValues(initialCommunities, row=1)
getValuesBlock(initialCommunities, row=1, nrows=1, col=38, ncols=6)
getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6, format='matrix')
cellFromRowCol(initialCommunities, rownr=1, colnr=38:43)
extract(initialCommunities,cellFromRowCol(initialCommunities, rownr=1, colnr=38:43))
xyFromCell(initialCommunities, getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6, format='matrix'))
xyFromCell(initialCommunities, getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6))
etValuesBlock(initialCommunities, row=1, nrows=1, col=38, ncols=6)
GetValuesBlock(initialCommunities, row=1, nrows=1, col=38, ncols=6)
getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6, format='matrix')
getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6)
count(getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6))
dim(getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6))
length(getValuesBlock(initialCommunities, row=1, nrows=5, col=38, ncols=6))
hist(initialCommunities)
hist(initialCommunities, col= "purple", maxpixels=9801)
image(initialCommunities)
image(initialCommunities, col=terrain.colors(6))
plot(initialCommunities, zlim=c(0,0))
plot(initialCommunities, zlim=c(0.5,1.5))
plot(initialCommunities, zlim=c(0,1.5))
image(initialCommunities, col=c("red", "blue", "green", "orange", "black", "purple"), zlim=c(0,6.5))
image(initialCommunities, col=c("purple"), zlim=c(0,6.5))
image(initialCommunities, col=c("red", "blue"), zlim=c(0,1.5))
mapsection1<-crop(initialCommunities, drawExtent())
plot(mapsection1)
image(initialCommunities, col=terrain.colors(6))
mapsection1<-crop(initialCommunities, drawExtent())
plot(mapsection1)
image(initialCommunities, col=terrain.colors(6))
mapsection1<-crop(initialCommunities, drawExtent())
plot(mapsection1)
q()
q()
library(BRugs)
library(BRugs)
library(coda)
Y.98.coda2<-read.openbugs("/home/bmarron/Desktop/BUGS3/")
densityplot(Y.98.coda2,
xlab ="x",
ylab = "p(x)",
ylim=c(0, 2)
)
q()
library(BRugs)
library(coda)
modelSetWD("/home/bmarron/Desktop/MiscProjects_GitHub/Bayesian_Statistics/BUGS/Working_Models")
modelCheck("model.txt")
#no data
#modelData("data.txt")
modelCompile(numChains=1)
#no inits
#modelInits("inits.txt")
modelGenInits()
set.seed(47)
#burn-in
#modelUpdate(10000)
samplesSet(c("Y.99", "Y.98_99", "sT"))
#iterations
modelUpdate(10000)
samplesStats(c("Y.99", "Y.98_99", "sT"))
d1<-as.data.frame(table(samplesSample("y.99")))
d1
d1<-as.data.frame(table(samplesSample("Y.99")))
d1
d1$prob<- prop.table(d1[,2])
d1
d2<-as.data.frame(table(samplesSample("Y.98_99")))
d2
head(d2)
tail(d2)
str(d2)
samplesCoda("Y.99", "/home/bmarron/Desktop/BUGS/")
Y.99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS/")
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x",
ylim=c(0, 1.5)
)
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x"
)
xyplot(Y.99.coda)
Y.99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS/")
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x"
)
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x",
xlim=c(0,2)
)
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x",
xlim=c(1,2)
)
densityplot(Y.99.coda)
densplot(Y.99.coda)
summary(Y.99.coda)
cumuplot(Y.99.coda)
densityplot(Y.99.coda,
xlab ="x",
ylab = "prob density of x"
)
samplesCoda("Y.98_99", "/home/bmarron/Desktop/BUGS2/")
Y.98_99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS2/")
summary(Y.98_99.coda)
xyplot(Y.98_99.coda)
densplot(Y.98_99.coda)
densplot(Y.98_99.coda, ylim=c(0,1))
densplot(Y.98_99.coda)
densplot(Y.98_99.coda, ylim=c(0,.2))
densityplot(Y.98_99.coda,
xlab ="x",
ylab = "prob density of x"
)
d3<-as.data.frame(table(samplesSample("sT")))
str(d3)
head(d3)
tail(d3)
samplesCoda("sT", "/home/bmarron/Desktop/BUGS3/")
sT.coda<-read.openbugs("/home/bmarron/Desktop/BUGS3/")
summary(sT)
summary(sT.coda)
xyplot(sT.coda)
densplot(sT.coda)
densityplot(sT.coda,
xlab ="x",
ylab = "prob density of x"
)
max(samplesSample("sT"))
min(samplesSample("sT"))
install.packages("fitdistrplus")
library("fitdistrplus", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
fitdist(samplesSample("sT"), method = "mle")
fitdist(samplesSample("sT"), dist="exp", method = "mle")
q()
