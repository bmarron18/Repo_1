############## 
prep in R
################

	#load R packages
library(BRugs)
library(coda)

	#set R working directory for BRugs
getwd()
[1] "/home/bmarron"

oldwd<-getwd()	
modelSetWD("/home/bmarron/Desktop/MiscProjects_GitHub/Bayesian_Statistics/BUGS/Working_Models")



#######################
running the model in R
#######################

STEP-BY-STEP:
modelCheck("model.txt")
	#no data
	#modelData("data.txt")
modelCompile(numChains=1)
	#no inits
	#modelInits("inits.txt")
modelGenInits()
set.seed(47)
	#burn-in
	#modelUpdate(10000)

samplesSet(c("Y.99", "Y.98_99", "sT"))

	#iterations
modelUpdate(10000)


#########################
general outputs in R
########################
samplesSize("Y.99")
[1] 10000

samplesSize("Y.98_99")
[1] 10000

samplesSize("sT")
[1] 10000


samplesStats(c("Y.99", "Y.98_99", "sT"))
           mean     sd MC_error val2.5pc median val97.5pc start sample
Y.99    0.7993 0.4005 0.004081   0.0000  1.000      1.00     1  10000
Y.98_99 4.9840 4.9130 0.049710   0.1305  3.445     17.83     1  10000
sT      3.9850 4.8240 0.047930   0.0000  2.360     16.93     1  10000

          mean     sd MC_error val2.5pc median val97.5pc start sample
Y.99    0.7993 0.4005 0.004081   0.0000  1.000      1.00     1  10000
Y.98_99 4.9840 4.9130 0.049710   0.1305  3.445     17.83     1  10000
sT      3.9850 4.8240 0.047930   0.0000  2.360     16.93     1  10000

##############################
evaluation of nodes/variables
###############################

----- evaluation of Y.99 ------------------------

				#BRugs raw data for y.99:
samplesSample("y.99")

				#the BRugs empitical distribution for y.99: 
				#STEP1: extract counts to dataframe
d1<-as.data.frame(table(samplesSample("Y.99")))
d1
  Var1 Freq
1    0 2007
2    1 7993

				#the BRugs empirical distribution for Y.99: 
				#STEP2: extract frequency and add to dataframe
d1$prob<- prop.table(d1[,2])
d1
 Var1 Freq   prob
1    0 2007 0.2007
2    1 7993 0.7993

				#BRugs ==> CODA for Y.99:
				#STEP1: send BRugs output to 'coda'-style files; <filestem>="/home/bmarron/Desktop/BUGS/"
				#creates a NEW folder ("BUGS") on the Desktop w/ two, 'coda'-style files:
					CODAchain1.txt
					CODAindex.txt

samplesCoda("Y.99", "/home/bmarron/Desktop/BUGS/")
CODA files written

				#BRugs ==> CODA for Y.99:
				#STEP2: change data from 0s and 1s to 1s and 2s

BUGS ==> CODAchain1.txt ==> Edit ==> Find and Replace...


				#BRugs ==> CODA for Y.99:
				#STEP3: read coda-style data back into pkg 'coda' using the <filestem>
Y.99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS/")	
Abstracting Y.99 ... 10000 valid values



			#the CODA summary stats for Y.99 
summary(Y.99.coda)

Iterations = 1:10000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 10000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

          Mean             SD       Naive SE Time-series SE 
      1.799300       0.400544       0.004005       0.004005 

2. Quantiles for each variable:

 2.5%   25%   50%   75% 97.5% 
    1     2     2     2     2 


			#the CODA xyplot ('barcode') plot for Y.99 (trellis plot):
xyplot(Y.99.coda)


			#the CODA probability density function estimate 
densplot(Y.99.coda)


			#the kernel density plot for Y.99:
			#a trellis ('lattice') object
			# densityplots are kernel density estimates (smoothed histogram)
densityplot(Y.99.coda,
	xlab ="x",
	ylab = "prob density of x"
)
			






----- evaluation of Y.98_99 ------------------------------------


			#BRugs raw data for y.98_99:
samplesSample("Y.98_99")


			#the BRugs empitical distribution for y.98_99: 
			#STEP1: extract counts to dataframe
d2<-as.data.frame(table(samplesSample("Y.98_99")))
str(d2)
'data.frame':	9994 obs. of  2 variables:
 $ Var1: Factor w/ 9994 levels "0.000116","0.000727",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Freq: int  1 1 1 1 1 1 1 1 1 1 ...


head(d2)
      Var1 Freq
1 0.000116    1
2 0.000727    1
3 0.000988    1
4 0.001158    1
5 0.001367    1
6 0.002766    1

tail(d2)
          Var1 Freq
9989  36.92841    1
9990 37.081875    1
9991 37.266251    1
9992  39.22467    1
9993 39.930283    1
9994 41.883835    1


				#BRugs ==> CODA for Y.98_99:
				#STEP1: send BRugs output to 'coda'-style files; <filestem>="/home/bmarron/Desktop/BUGS2/"
				#creates a NEW folder ("BUGS2") on the Desktop w/ two, 'coda'-style files:
					CODAchain1.txt
					CODAindex.txt

samplesCoda("Y.98_99", "/home/bmarron/Desktop/BUGS2/")
CODA files written

				#BRugs ==> CODA for Y.98_99:
				#STEP2: read coda-style data back into pkg 'coda' using the <filestem>

Y.98_99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS2/")	
Abstracting Y.99 ... 10000 valid values


			#the CODA summary stats for Y.98_99 
summary(Y.98_99.coda)
Iterations = 1:10000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 10000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

          Mean             SD       Naive SE Time-series SE 
       4.98411        4.91345        0.04913        0.04913 

2. Quantiles for each variable:

   2.5%     25%     50%     75%   97.5% 
 0.1305  1.4550  3.4440  7.0095 17.8300 



			#the CODA xyplot ('barcode') plot for Y.98_99 (trellis plot):
xyplot(Y.98_99.coda)


			#the CODA probability density function estimate 
densplot(Y.98_99.coda)

			#the kernel density plot for Y.98_99:
			#a trellis ('lattice') object
			# densityplots are kernel density estimates (smoothed histogram)
densityplot(Y.98_99.coda,
	xlab ="x",
	ylab = "prob density of x"
)



----- evaluation of St ------------------------------------


			#BRugs raw data:
samplesSample("sT")

			#BRugs raw data max-min: 
max(samplesSample("sT"))
[1] 41.88383
min(samplesSample("sT"))
[1] 0


			#the BRugs empitical distribution: 
			#STEP1: extract counts to dataframe
d3<-as.data.frame(table(samplesSample("sT")))
str(d3)
'data.frame':	7989 obs. of  2 variables:
 $ Var1: Factor w/ 7989 levels "0","0.000116",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Freq: int  2007 1 1 1 1 1 1 1 1 1 ...


head(d3)
      Var1 Freq
1        0 2007
2 0.000116    1
3 0.000727    1
4 0.000988    1
5 0.001158    1
6 0.001367    1
> tail(d3)
          Var1 Freq
7984 36.793259    1
7985  36.92841    1
7986 37.081875    1
7987 37.266251    1
7988  39.22467    1
7989 41.883835    1

				#BRugs ==> CODA:
				#STEP1: send BRugs output to 'coda'-style files; <filestem>="/home/bmarron/Desktop/BUGS3/"
				#creates a NEW folder ("BUGS3") on the Desktop w/ two, 'coda'-style files:
					CODAchain1.txt
					CODAindex.txt

samplesCoda("sT", "/home/bmarron/Desktop/BUGS3/")
CODA files written

				#BRugs ==> CODA:
				#STEP2: read coda-style data back into pkg 'coda' using the <filestem>

sT.coda<-read.openbugs("/home/bmarron/Desktop/BUGS3/")	
Abstracting Y.99 ... 10000 valid values


			#the CODA summary stats for sT
summary(sT.coda)

Iterations = 1:10000
Thinning interval = 1 
Number of chains = 1 
Sample size per chain = 10000 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

          Mean             SD       Naive SE Time-series SE 
       3.98511        4.82472        0.04825        0.04707 

2. Quantiles for each variable:

  2.5%    25%    50%    75%  97.5% 
 0.000  0.336  2.360  5.896 16.910 



			#the CODA xyplot ('barcode') plot:
xyplot(sT.coda)


			#the CODA probability density function estimate 
densplot(sT.coda)

			#the kernel density plot:
			#a trellis ('lattice') object
			# densityplots are kernel density estimates (smoothed histogram)
densityplot(sT.coda,
	xlab ="x",
	ylab = "prob density of x"
)


library(fitdistrplus)
fitdist(samplesSample("sT"), dist="exp", method = "mle")
Fitting of the distribution ' exp ' by maximum likelihood 
Parameters:
      estimate  Std. Error
rate 0.2509346 0.002509306





###########
graphics 
############

---change param settings in R ------------
> param1<-par()		#save the old settings

> library(graphics)
> n2mfrow(nr.plots)		#nr.plots = integer; the number of plot figures you want to draw.
				#returns a length two integer vector nr, nc giving the number of rows and columns, 
				#fulfilling nr >= nc >= 1 and nr * nc >= nr.plots.
> par("mar")
[1] 5.1 4.1 4.1 2.1

		#Try various margin settings:
> par(mar=c(1,1,1,1))
> par(mar=c(2,2,2,2))

> n2mfrow(1)
[1] 1 1


----- generic density plots -------------------------------------------------------

				#can't seem to get plots to fill the whole frame!
samplesDensity("Y.99")
samplesDensity("Y.98[1]")
.......
samplesDensity("Y.98[10]")


---- CODA plots ----------------------------------------------------------------------------------
				# for Y.99
				#RBugs output for pkg 'coda'; <filestem>="/home/bmarron/Desktop/BUGS/"
				#creates a NEW folder ("BUGS") on the Desktop w/ two files:
					CODAchain1.txt
					CODAindex.txt
$ samplesCoda("Y.99", "/home/bmarron/Desktop/BUGS/")
CODA files written

				#read in data to pkg 'coda' using the <filestem>
$ Y.99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS/")	
Abstracting Y.99 ... 10000 valid values


				#'coda' plots a trellis ('lattice') object
				# densityplots are kernel density estimates (smoothed histogram)
densityplot(Y.99.coda,
	xlab ="x",
	ylab = "p(x)",
	ylim=c(0, 1.5)
)
				
				#for Y.98
				#NB. This will overwrite Y.99 CODA data if given the same filestem
$ samplesCoda("Y.98", "/home/bmarron/Desktop/BUGS2/")
CODA files written

			#from CODAindex.txt
Y.98[1]	1	10000
Y.98[2]	10001	20000
Y.98[3]	20001	30000
Y.98[4]	30001	40000
Y.98[5]	40001	50000
Y.98[6]	50001	60000
Y.98[7]	60001	70000
Y.98[8]	70001	80000
Y.98[9]	80001	90000
Y.98[10]	90001	100000



Y.98.coda<-read.openbugs("/home/bmarron/Desktop/BUGS2/")
Abstracting Y.98[1] ... 10000 valid values
Abstracting Y.98[2] ... 10000 valid values
Abstracting Y.98[3] ... 10000 valid values
Abstracting Y.98[4] ... 10000 valid values
Abstracting Y.98[5] ... 10000 valid values
Abstracting Y.98[6] ... 10000 valid values
Abstracting Y.98[7] ... 10000 valid values
Abstracting Y.98[8] ... 10000 valid values
Abstracting Y.98[9] ... 10000 valid values
Abstracting Y.98[10] ... 10000 valid values


			# gives 10, kernel density plots
densityplot(Y.98.coda,
	xlab ="x",
	ylab = "p(x)",
	ylim=c(0, 2)
	   
)


---- concatenate Y.98 data (modify CODAchain1.txt) ------------------
			#STEP1:
			#use Linux command "cut" for text processing
			#keep only field 2 (TAB separated fields)
			#send output to new folder, BUGS3

$ cut -f2 /home/bmarron/Desktop/BUGS2/CODAchain1.txt >> ~/Desktop/BUGS3/CODAchain1.txt

			#STEP2:
			#use Linux command "awk"
			#see also Linux command "sed"
			#Precede each line by its number in the file with a tab space
			#send output to a new file
AWK is a line-oriented language.  The pattern comes first, and then the
action.  Action statements are enclosed in { and }.  Either the pattern
may be missing, or the action may be missing, but, of course, not both.
Each field in the input record may be referenced by its  position,  $1,
$2,  and so on.  $0 is the whole record. 


$ awk '{print FNR "\t" $0}' ~/Desktop/BUGS3/CODAchain1.txt >> ~/Desktop/BUGS3/CODAchain.txt

			#STEP3:
			#modify CODAindex.txt as,
Y.98	1	100000

			#STEP4:
			#load modified data into "coda"
Y.98.coda2<-read.openbugs("/home/bmarron/Desktop/BUGS3/")
Abstracting Y.98 ... 100000 valid values


densityplot(Y.98.coda2,
             xlab ="x",
             ylab = "p(x)",
             ylim=c(0, 2)
             
)








