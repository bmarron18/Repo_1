############## 
prep in R
################

	#load R packages
> library(BRugs)
> library(coda)

	#set R working directory for BRugs
> getwd()
[1] "/home/bmarron"

> oldwd<-getwd()	
> modelSetWD("/home/bmarron/Desktop/MiscProjects_GitHub/Bayesian_Statistics/BUGS/Working_Models")



#######################
running the model in R
#######################

STEP-BY-STEP:
modelCheck("model.txt")
	#no data
	#modelData("data.txt")
modelCompile(numChains=1)
	#no inits
	#modelInits("inits.txt")
modelGenInits()
set.seed(47)
	#burn-in
	#modelUpdate(10000)

samplesSet(c("Y.99", "Y.98"))
summarySet(c("Y.99", "Y.98"))

	#iterations
modelUpdate(10000)


########
outputs
########
> samplesSize("Y.99")
[1] 10000

>samplesSize("Y.98")
Error in samplesSize("Y.98") : node must be a scalar variable from the model

> samplesSize("Y.98[1]")
[1] 10000

> samplesSize("Y.98[2]")
[1] 10000
......
> samplesSize("Y.98[10]")
[1] 10000

> summaryStats(c("Y.99", "Y.98"))
          mean     sd val2.5pc median val97.5pc sample
Y.99     8.994 0.9400     7.00      9        10  10000
Y.98[1]  8.998 0.9514     7.00      9        10  10000
Y.98[2]  9.008 0.9545     7.00      9        10  10000
Y.98[3]  8.979 0.9564     7.00      9        10  10000
Y.98[4]  8.988 0.9551     7.00      9        10  10000
Y.98[5]  8.998 0.9541     7.00      9        10  10000
Y.98[6]  9.008 0.9458     6.96      9        10  10000
Y.98[7]  9.002 0.9495     7.00      9        10  10000
Y.98[8]  9.002 0.9444     7.00      9        10  10000
Y.98[9]  9.004 0.9595     7.00      9        10  10000
Y.98[10] 9.002 0.9660     7.00      9        10  10000

> samplesStats(c("Y.99", "Y.98"))
          mean     sd MC_error val2.5pc median val97.5pc start sample
Y.99     8.994 0.9400 0.009237        7      9        10     1  10000
Y.98[1]  8.998 0.9514 0.010310        7      9        10     1  10000
Y.98[2]  9.008 0.9545 0.008800        7      9        10     1  10000
Y.98[3]  8.979 0.9564 0.009461        7      9        10     1  10000
Y.98[4]  8.988 0.9551 0.009675        7      9        10     1  10000
Y.98[5]  8.998 0.9541 0.009614        7      9        10     1  10000
Y.98[6]  9.008 0.9458 0.009099        7      9        10     1  10000
Y.98[7]  9.002 0.9495 0.008754        7      9        10     1  10000
Y.98[8]  9.002 0.9444 0.008923        7      9        10     1  10000
Y.98[9]  9.004 0.9595 0.008991        7      9        10     1  10000
Y.98[10] 9.002 0.9660 0.009126        7      9        10     1  10000



				#raw data for Y.99
> samplesSample("Y.99")

				#the empitical distribution for Y.99: 
				#extract counts to dataframe
> d1<-as.data.frame(table(samplesSample("Y.99")))
d1
  Var1 Freq
1    4    1
2    5   15
3    6  108
4    7  544
5    8 2005
6    9 3909
7   10 3418

			#the empirical distribution for Y.99: 
			#extract frequency and add to dataframe
> d1$prob<- prop.table(d1[,2])
d1
  Var1 Freq   prob
1    4    1 0.0001
2    5   15 0.0015
3    6  108 0.0108
4    7  544 0.0544
5    8 2005 0.2005
6    9 3909 0.3909
7   10 3418 0.3418



			#the empirical distribution for Y.98: 
> d2.1<-as.data.frame(table(samplesSample("Y.98[1]")))
d2.1
  Var1 Freq
1    4    3
2    5   10
3    6  122
4    7  585
5    8 1901
6    9 3902
7   10 3477


> d2.1$prob<- prop.table(d2.1[,2])
d2.1
  Var1 Freq   prob
1    4    3 0.0003
2    5   10 0.0010
3    6  122 0.0122
4    7  585 0.0585
5    8 1901 0.1901
6    9 3902 0.3902
7   10 3477 0.3477



> d2.2<-as.data.frame(table(samplesSample("Y.98[2]")))
> d2.2$prob<- prop.table(d2.2[,2])
d2.2
  Var1 Freq   prob
1    5   21 0.0021
2    6  108 0.0108
3    7  568 0.0568
4    8 1955 0.1955
5    9 3772 0.3772
6   10 3576 0.3576

.......

###########
graphics 
############

---change param settings in R ------------
> param1<-par()		#save the old settings

> library(graphics)
> n2mfrow(nr.plots)		#nr.plots = integer; the number of plot figures you want to draw.
				#returns a length two integer vector nr, nc giving the number of rows and columns, 
				#fulfilling nr >= nc >= 1 and nr * nc >= nr.plots.
> par("mar")
[1] 5.1 4.1 4.1 2.1

		#Try various margin settings:
> par(mar=c(1,1,1,1))
> par(mar=c(2,2,2,2))

> n2mfrow(1)
[1] 1 1


----- generic density plots -------------------------------------------------------

				#can't seem to get plots to fill the whole frame!
samplesDensity("Y.99")
samplesDensity("Y.98[1]")
.......
samplesDensity("Y.98[10]")


---- CODA plots ----------------------------------------------------------------------------------
				# for Y.99
				#RBugs output for pkg 'coda'; <filestem>="/home/bmarron/Desktop/BUGS/"
				#creates a NEW folder ("BUGS") on the Desktop w/ two files:
					CODAchain1.txt
					CODAindex.txt
$ samplesCoda("Y.99", "/home/bmarron/Desktop/BUGS/")
CODA files written

				#read in data to pkg 'coda' using the <filestem>
$ Y.99.coda<-read.openbugs("/home/bmarron/Desktop/BUGS/")	
Abstracting Y.99 ... 10000 valid values


				#'coda' plots a trellis ('lattice') object
				# densityplots are kernel density estimates (smoothed histogram)
densityplot(Y.99.coda,
	xlab ="x",
	ylab = "p(x)",
	ylim=c(0, 1.5)
)
				
				#for Y.98
				#NB. This will overwrite Y.99 CODA data if given the same filestem
$ samplesCoda("Y.98", "/home/bmarron/Desktop/BUGS2/")
CODA files written

			#from CODAindex.txt
Y.98[1]	1	10000
Y.98[2]	10001	20000
Y.98[3]	20001	30000
Y.98[4]	30001	40000
Y.98[5]	40001	50000
Y.98[6]	50001	60000
Y.98[7]	60001	70000
Y.98[8]	70001	80000
Y.98[9]	80001	90000
Y.98[10]	90001	100000



Y.98.coda<-read.openbugs("/home/bmarron/Desktop/BUGS2/")
Abstracting Y.98[1] ... 10000 valid values
Abstracting Y.98[2] ... 10000 valid values
Abstracting Y.98[3] ... 10000 valid values
Abstracting Y.98[4] ... 10000 valid values
Abstracting Y.98[5] ... 10000 valid values
Abstracting Y.98[6] ... 10000 valid values
Abstracting Y.98[7] ... 10000 valid values
Abstracting Y.98[8] ... 10000 valid values
Abstracting Y.98[9] ... 10000 valid values
Abstracting Y.98[10] ... 10000 valid values


			# gives 10, kernel density plots
densityplot(Y.98.coda,
	xlab ="x",
	ylab = "p(x)",
	ylim=c(0, 2)
	   
)


---- concatenate Y.98 data (modify CODAchain1.txt) ------------------
			#STEP1:
			#use Linux command "cut" for text processing
			#keep only field 2 (TAB separated fields)
			#send output to new folder, BUGS3

$ cut -f2 /home/bmarron/Desktop/BUGS2/CODAchain1.txt >> ~/Desktop/BUGS3/CODAchain1.txt

			#STEP2:
			#use Linux command "awk"
			#see also Linux command "sed"
			#Precede each line by its number in the file with a tab space
			#send output to a new file
AWK is a line-oriented language.  The pattern comes first, and then the
action.  Action statements are enclosed in { and }.  Either the pattern
may be missing, or the action may be missing, but, of course, not both.
Each field in the input record may be referenced by its  position,  $1,
$2,  and so on.  $0 is the whole record. 


$ awk '{print FNR "\t" $0}' ~/Desktop/BUGS3/CODAchain1.txt >> ~/Desktop/BUGS3/CODAchain.txt

			#STEP3:
			#modify CODAindex.txt as,
Y.98	1	100000

			#STEP4:
			#load modified data into "coda"
Y.98.coda2<-read.openbugs("/home/bmarron/Desktop/BUGS3/")
Abstracting Y.98 ... 100000 valid values


densityplot(Y.98.coda2,
             xlab ="x",
             ylab = "p(x)",
             ylim=c(0, 2)
             
)








